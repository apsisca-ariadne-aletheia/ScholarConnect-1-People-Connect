pip install Flask-Bcrypt

from flask import Flask, render_template, request, redirect, url_for, flash
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
import os

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'  # Change this to a secure secret key
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'  # Use SQLite for simplicity, replace with a different database in production
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Setup Flask-Login
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# Setup Flask-SQLAlchemy
db = SQLAlchemy(app)

# Setup Flask-Bcrypt
bcrypt = Bcrypt(app)


class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
    password = db.Column(db.String(60), nullable=False)
    interests = db.Column(db.String(100), nullable=False)


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Update the submit route in app.py to use Flask-Bcrypt for hashing passwords:
# Update the submit route

@app.route('/submit', methods=['POST'])
def submit():
    username = request.form.get('username')
    raw_password = request.form.get('password')  # Retrieve the raw password

    # Check if the user already exists
    existing_user = User.query.filter_by(username=username).first()

    if existing_user:
        # User already exists, show an error
        flash('Username already taken. Please choose a different username.', 'error')
        return redirect(url_for('index'))
    else:
        # Hash the password before storing it
        hashed_password = bcrypt.generate_password_hash(raw_password).decode('utf-8')

        # Create a new user with the hashed password
        new_user = User(username=username, password=hashed_password, interests=request.form.get('interests'))
        db.session.add(new_user)
        db.session.commit()

        # Log in the newly registered user
        login_user(new_user)
        flash('Registered and logged in successfully!', 'success')
        return redirect(url_for('dashboard', user_id=new_user.id))

# Updating other authentication routes: The login route to compare hashed passwords:

# Update the login route

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()

    if form.validate_on_submit():
        username = form.username.data
        raw_password = form.password.data  # Retrieve the raw password

        # Check if the username exists
        user = User.query.filter_by(username=username).first()

        if user and bcrypt.check_password_hash(user.password, raw_password):
            # Valid credentials, log the user in
            login_user(user)
            flash('Logged in successfully!', 'success')
            return redirect(url_for('dashboard', user_id=user.id))
        else:
            flash('Invalid username or password. Please try again.', 'error')

    return render_template('login.html', form=form)
