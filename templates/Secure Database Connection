pip install Flask-SQLAlchemy

from flask import Flask, render_template, request, redirect, url_for, flash
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired
from flask_sqlalchemy import SQLAlchemy
import os

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'  # Change this to a secure secret key
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'  # Use SQLite for simplicity, replace with a different database in production
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Setup Flask-Login
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# Setup Flask-SQLAlchemy
db = SQLAlchemy(app)

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
    password = db.Column(db.String(60), nullable=False)
    interests = db.Column(db.String(100), nullable=False)


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Update the submit route and the routes related to authentication in app.py:
# Update the User class in models.py
# Update the submit route

@app.route('/submit', methods=['POST'])
def submit():
    username = request.form.get('username')
    password = request.form.get('password')
    interests = request.form.get('interests')

    # Check if the user already exists
    existing_user = User.query.filter_by(username=username).first()

    if existing_user:
        # User exists, log them in
        login_user(existing_user)
        flash('Logged in successfully!', 'success')
        return redirect(url_for('dashboard', user_id=existing_user.id))
    else:
        # User doesn't exist, register them
        new_user = User(username=username, password=password, interests=interests)
        db.session.add(new_user)
        db.session.commit()

        # Log in the newly registered user
        login_user(new_user)
        flash('Registered and logged in successfully!', 'success')
        return redirect(url_for('dashboard', user_id=new_user.id))


# Update the login route

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()

    if form.validate_on_submit():
        username = form.username.data
        password = form.password.data

        # Check if the username and password are valid
        user = User.query.filter_by(username=username, password=password).first()

        if user:
            # Valid credentials, log the user in
            login_user(user)
            flash('Logged in successfully!', 'success')
            return redirect(url_for('dashboard', user_id=user.id))
        else:
            flash('Invalid username or password. Please try again.', 'error')

    return render_template('login.html', form=form)


# Update the dashboard route

@app.route('/dashboard/<int:user_id>')
@login_required
def dashboard(user_id):
    return render_template('dashboard.html', user=current_user)


# Update the logout route

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('Logged out successfully!', 'success')
    return redirect(url_for('index'))

# Add additional routes

if __name__ == '__main__':
    db.create_all()  # Create database tables before running the app
    app.run(debug=True)

# Now, when the application runs, it will use SQLAlchemy to interact with the database. The User class inherits from db.Model, and db.create_all() is used to create the necessary tables in the database.

# Replace 'your_secret_key' with a secure secret key (developed by rest of the research staff)


